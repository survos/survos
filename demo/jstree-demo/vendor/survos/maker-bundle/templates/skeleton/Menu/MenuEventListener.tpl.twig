<?= "<?php\n" ?>

namespace <?= $namespace ?>;

<?= $use_statements; ?>

#[AsEventListener(event: KnpMenuEvent::NAVBAR_MENU, method: 'navbarMenu')]
// #[AsEventListener(event: KnpMenuEvent::NAVBAR_MENU2, method: 'navbarMenu')]
#[AsEventListener(event: KnpMenuEvent::SIDEBAR_MENU, method: 'sidebarMenu')]
#[AsEventListener(event: KnpMenuEvent::PAGE_MENU, method: 'pageMenu')]
#[AsEventListener(event: KnpMenuEvent::FOOTER_MENU, method: 'footerMenu')]
#[AsEventListener(event: KnpMenuEvent::AUTH_MENU, method: 'appAuthMenu')]


final class <?= $class_name ?> implements KnpMenuHelperInterface<?= "\n" ?>
{
    use KnpMenuHelperTrait;

public function __construct(
#[Autowire('%kernel.environment%')] private string $env,
private MenuService $menuService,
private Security $security,
private ?AuthorizationCheckerInterface $authorizationChecker=null

)
{
}

public function appAuthMenu(KnpMenuEvent $event): void
{
$menu = $event->getMenu();
$this->menuService->addAuthMenu($menu);
}


public function navbarMenu(KnpMenuEvent $event): void
{
$menu = $event->getMenu();
$options = $event->getOptions();

//        $this->add($menu, 'app_homepage');
// for nested menus, don't add a route, just a label, then use it for the argument to addMenuItem

$nestedMenu = $this->addSubmenu($menu, 'Credits');
foreach (['bundles', 'javascript'] as $type) {
// $this->addMenuItem($nestedMenu, ['route' => 'survos_base_credits', 'rp' => ['type' => $type], 'label' => ucfirst($type)]);
$this->addMenuItem($nestedMenu, ['uri' => "#$type" , 'label' => ucfirst($type)]);
}

}



public function sidebarMenu(KnpMenuEvent $event): void
    {
        $menu = $event->getMenu();
        $options = $event->getOptions();
    }

public function footerMenu(KnpMenuEvent $event): void
{
$menu = $event->getMenu();
$options = $event->getOptions();
$this->add($menu, uri: 'https://github.com');
}

// this could also be called the content menu, as it's below the navbar, e.g. a menu for an entity, like show, edit
public function pageMenu(KnpMenuEvent $event): void
{
$menu = $event->getMenu();
$options = $event->getOptions();
}

}
