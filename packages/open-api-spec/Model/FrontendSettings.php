<?php
/**
 * FrontendSettings
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * LibreTranslate
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.11
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the FrontendSettings model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class FrontendSettings 
{
        /**
     * Whether the API key database is enabled.
     *
     * @var bool|null
     * @SerializedName("apiKeys")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $apiKeys = null;

    /**
     * Character input limit for this language (-1 indicates no limit)
     *
     * @var int|null
     * @SerializedName("charLimit")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $charLimit = null;

    /**
     * Frontend translation timeout
     *
     * @var int|null
     * @SerializedName("frontendTimeout")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $frontendTimeout = null;

    /**
     * Whether an API key is required.
     *
     * @var bool|null
     * @SerializedName("keyRequired")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $keyRequired = null;

    /**
     * @var FrontendSettingsLanguage|null
     * @SerializedName("language")
     * @Assert\Type("OpenAPI\Server\Model\FrontendSettingsLanguage")
     * @Type("OpenAPI\Server\Model\FrontendSettingsLanguage")
     */
    protected ?FrontendSettingsLanguage $language = null;

    /**
     * Whether submitting suggestions is enabled.
     *
     * @var bool|null
     * @SerializedName("suggestions")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $suggestions = null;

    /**
     * Supported files format
     *
     * @var array|null
     * @SerializedName("supportedFilesFormat")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    protected ?array $supportedFilesFormat = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->apiKeys = $data['apiKeys'] ?? null;
        $this->charLimit = $data['charLimit'] ?? null;
        $this->frontendTimeout = $data['frontendTimeout'] ?? null;
        $this->keyRequired = $data['keyRequired'] ?? null;
        $this->language = $data['language'] ?? null;
        $this->suggestions = $data['suggestions'] ?? null;
        $this->supportedFilesFormat = $data['supportedFilesFormat'] ?? null;
    }

    /**
     * Gets apiKeys.
     *
     * @return bool|null
     */
    public function isApiKeys(): ?bool
    {
        return $this->apiKeys;
    }

    /**
     * Sets apiKeys.
     *
     * @param bool|null $apiKeys  Whether the API key database is enabled.
     *
     * @return $this
     */
    public function setApiKeys(?bool $apiKeys = null): self
    {
        $this->apiKeys = $apiKeys;

        return $this;
    }

    /**
     * Gets charLimit.
     *
     * @return int|null
     */
    public function getCharLimit(): ?int
    {
        return $this->charLimit;
    }

    /**
     * Sets charLimit.
     *
     * @param int|null $charLimit  Character input limit for this language (-1 indicates no limit)
     *
     * @return $this
     */
    public function setCharLimit(?int $charLimit = null): self
    {
        $this->charLimit = $charLimit;

        return $this;
    }

    /**
     * Gets frontendTimeout.
     *
     * @return int|null
     */
    public function getFrontendTimeout(): ?int
    {
        return $this->frontendTimeout;
    }

    /**
     * Sets frontendTimeout.
     *
     * @param int|null $frontendTimeout  Frontend translation timeout
     *
     * @return $this
     */
    public function setFrontendTimeout(?int $frontendTimeout = null): self
    {
        $this->frontendTimeout = $frontendTimeout;

        return $this;
    }

    /**
     * Gets keyRequired.
     *
     * @return bool|null
     */
    public function isKeyRequired(): ?bool
    {
        return $this->keyRequired;
    }

    /**
     * Sets keyRequired.
     *
     * @param bool|null $keyRequired  Whether an API key is required.
     *
     * @return $this
     */
    public function setKeyRequired(?bool $keyRequired = null): self
    {
        $this->keyRequired = $keyRequired;

        return $this;
    }

    /**
     * Gets language.
     *
     * @return FrontendSettingsLanguage|null
     */
    public function getLanguage(): ?FrontendSettingsLanguage
    {
        return $this->language;
    }

    /**
     * Sets language.
     *
     * @param FrontendSettingsLanguage|null $language
     *
     * @return $this
     */
    public function setLanguage(?FrontendSettingsLanguage $language = null): self
    {
        $this->language = $language;

        return $this;
    }

    /**
     * Gets suggestions.
     *
     * @return bool|null
     */
    public function isSuggestions(): ?bool
    {
        return $this->suggestions;
    }

    /**
     * Sets suggestions.
     *
     * @param bool|null $suggestions  Whether submitting suggestions is enabled.
     *
     * @return $this
     */
    public function setSuggestions(?bool $suggestions = null): self
    {
        $this->suggestions = $suggestions;

        return $this;
    }

    /**
     * Gets supportedFilesFormat.
     *
     * @return array|null
     */
    public function getSupportedFilesFormat(): ?array
    {
        return $this->supportedFilesFormat;
    }

    /**
     * Sets supportedFilesFormat.
     *
     * @param array|null $supportedFilesFormat  Supported files format
     *
     * @return $this
     */
    public function setSupportedFilesFormat(?array $supportedFilesFormat = null): self
    {
        $this->supportedFilesFormat = $supportedFilesFormat;

        return $this;
    }
}


