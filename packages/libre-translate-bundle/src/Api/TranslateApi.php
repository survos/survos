<?php
/**
 * TranslateApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Survos\LibreTranslateBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LibreTranslate
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Survos\LibreTranslateBundle\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Survos\LibreTranslateBundle\ApiException;
use Survos\LibreTranslateBundle\Configuration;
use Survos\LibreTranslateBundle\HeaderSelector;
use Survos\LibreTranslateBundle\ObjectSerializer;

/**
 * TranslateApi Class Doc Comment
 *
 * @category Class
 * @package  Survos\LibreTranslateBundle
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TranslateApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'detectPost' => [
            'multipart/form-data',
        ],
        'languagesGet' => [
            'application/json',
        ],
        'translateFilePost' => [
            'multipart/form-data',
        ],
        'translatePost' => [
            'multipart/form-data',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation detectPost
     *
     * Detect the language of a single text
     *
     * @param  mixed $q Text to detect (required)
     * @param  mixed $api_key API key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['detectPost'] to see the possible values for this operation
     *
     * @throws \Survos\LibreTranslateBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Survos\LibreTranslateBundle\Model\DetectionsInner[]|\Survos\LibreTranslateBundle\Model\ErrorResponse|\Survos\LibreTranslateBundle\Model\ErrorResponse|\Survos\LibreTranslateBundle\Model\ErrorSlowDown|\Survos\LibreTranslateBundle\Model\ErrorResponse
     */
    public function detectPost($q, $api_key = null, string $contentType = self::contentTypes['detectPost'][0])
    {
        list($response) = $this->detectPostWithHttpInfo($q, $api_key, $contentType);
        return $response;
    }

    /**
     * Operation detectPostWithHttpInfo
     *
     * Detect the language of a single text
     *
     * @param  mixed $q Text to detect (required)
     * @param  mixed $api_key API key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['detectPost'] to see the possible values for this operation
     *
     * @throws \Survos\LibreTranslateBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Survos\LibreTranslateBundle\Model\DetectionsInner[]|\Survos\LibreTranslateBundle\Model\ErrorResponse|\Survos\LibreTranslateBundle\Model\ErrorResponse|\Survos\LibreTranslateBundle\Model\ErrorSlowDown|\Survos\LibreTranslateBundle\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function detectPostWithHttpInfo($q, $api_key = null, string $contentType = self::contentTypes['detectPost'][0])
    {
        $request = $this->detectPostRequest($q, $api_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Survos\LibreTranslateBundle\Model\DetectionsInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Survos\LibreTranslateBundle\Model\DetectionsInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Survos\LibreTranslateBundle\Model\DetectionsInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Survos\LibreTranslateBundle\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Survos\LibreTranslateBundle\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Survos\LibreTranslateBundle\Model\ErrorSlowDown' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Survos\LibreTranslateBundle\Model\ErrorSlowDown' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Survos\LibreTranslateBundle\Model\ErrorSlowDown', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Survos\LibreTranslateBundle\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Survos\LibreTranslateBundle\Model\DetectionsInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Survos\LibreTranslateBundle\Model\DetectionsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Survos\LibreTranslateBundle\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Survos\LibreTranslateBundle\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Survos\LibreTranslateBundle\Model\ErrorSlowDown',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Survos\LibreTranslateBundle\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation detectPostAsync
     *
     * Detect the language of a single text
     *
     * @param  mixed $q Text to detect (required)
     * @param  mixed $api_key API key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['detectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function detectPostAsync($q, $api_key = null, string $contentType = self::contentTypes['detectPost'][0])
    {
        return $this->detectPostAsyncWithHttpInfo($q, $api_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation detectPostAsyncWithHttpInfo
     *
     * Detect the language of a single text
     *
     * @param  mixed $q Text to detect (required)
     * @param  mixed $api_key API key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['detectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function detectPostAsyncWithHttpInfo($q, $api_key = null, string $contentType = self::contentTypes['detectPost'][0])
    {
        $returnType = '\Survos\LibreTranslateBundle\Model\DetectionsInner[]';
        $request = $this->detectPostRequest($q, $api_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'detectPost'
     *
     * @param  mixed $q Text to detect (required)
     * @param  mixed $api_key API key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['detectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function detectPostRequest($q, $api_key = null, string $contentType = self::contentTypes['detectPost'][0])
    {

        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling detectPost'
            );
        }



        $resourcePath = '/detect';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($q !== null) {
            $formParams['q'] = ObjectSerializer::toFormValue($q);
        }
        // form params
        if ($api_key !== null) {
            $formParams['api_key'] = ObjectSerializer::toFormValue($api_key);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation languagesGet
     *
     * Retrieve list of supported languages
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['languagesGet'] to see the possible values for this operation
     *
     * @throws \Survos\LibreTranslateBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Survos\LibreTranslateBundle\Model\LanguagesInner[]
     */
    public function languagesGet(string $contentType = self::contentTypes['languagesGet'][0])
    {
        list($response) = $this->languagesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation languagesGetWithHttpInfo
     *
     * Retrieve list of supported languages
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['languagesGet'] to see the possible values for this operation
     *
     * @throws \Survos\LibreTranslateBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Survos\LibreTranslateBundle\Model\LanguagesInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function languagesGetWithHttpInfo(string $contentType = self::contentTypes['languagesGet'][0])
    {
        $request = $this->languagesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Survos\LibreTranslateBundle\Model\LanguagesInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Survos\LibreTranslateBundle\Model\LanguagesInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Survos\LibreTranslateBundle\Model\LanguagesInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Survos\LibreTranslateBundle\Model\LanguagesInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Survos\LibreTranslateBundle\Model\LanguagesInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation languagesGetAsync
     *
     * Retrieve list of supported languages
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['languagesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function languagesGetAsync(string $contentType = self::contentTypes['languagesGet'][0])
    {
        return $this->languagesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation languagesGetAsyncWithHttpInfo
     *
     * Retrieve list of supported languages
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['languagesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function languagesGetAsyncWithHttpInfo(string $contentType = self::contentTypes['languagesGet'][0])
    {
        $returnType = '\Survos\LibreTranslateBundle\Model\LanguagesInner[]';
        $request = $this->languagesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'languagesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['languagesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function languagesGetRequest(string $contentType = self::contentTypes['languagesGet'][0])
    {


        $resourcePath = '/languages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation translateFilePost
     *
     * Translate file from a language to another
     *
     * @param  \SplFileObject $file File to translate (required)
     * @param  mixed $source Source language code (required)
     * @param  mixed $target Target language code (required)
     * @param  mixed $api_key API key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['translateFilePost'] to see the possible values for this operation
     *
     * @throws \Survos\LibreTranslateBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Survos\LibreTranslateBundle\Model\TranslateFile|\Survos\LibreTranslateBundle\Model\ErrorResponse|\Survos\LibreTranslateBundle\Model\ErrorResponse|\Survos\LibreTranslateBundle\Model\ErrorSlowDown|\Survos\LibreTranslateBundle\Model\ErrorResponse
     */
    public function translateFilePost($file, $source, $target, $api_key = null, string $contentType = self::contentTypes['translateFilePost'][0])
    {
        list($response) = $this->translateFilePostWithHttpInfo($file, $source, $target, $api_key, $contentType);
        return $response;
    }

    /**
     * Operation translateFilePostWithHttpInfo
     *
     * Translate file from a language to another
     *
     * @param  \SplFileObject $file File to translate (required)
     * @param  mixed $source Source language code (required)
     * @param  mixed $target Target language code (required)
     * @param  mixed $api_key API key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['translateFilePost'] to see the possible values for this operation
     *
     * @throws \Survos\LibreTranslateBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Survos\LibreTranslateBundle\Model\TranslateFile|\Survos\LibreTranslateBundle\Model\ErrorResponse|\Survos\LibreTranslateBundle\Model\ErrorResponse|\Survos\LibreTranslateBundle\Model\ErrorSlowDown|\Survos\LibreTranslateBundle\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function translateFilePostWithHttpInfo($file, $source, $target, $api_key = null, string $contentType = self::contentTypes['translateFilePost'][0])
    {
        $request = $this->translateFilePostRequest($file, $source, $target, $api_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Survos\LibreTranslateBundle\Model\TranslateFile' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Survos\LibreTranslateBundle\Model\TranslateFile' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Survos\LibreTranslateBundle\Model\TranslateFile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Survos\LibreTranslateBundle\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Survos\LibreTranslateBundle\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Survos\LibreTranslateBundle\Model\ErrorSlowDown' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Survos\LibreTranslateBundle\Model\ErrorSlowDown' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Survos\LibreTranslateBundle\Model\ErrorSlowDown', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Survos\LibreTranslateBundle\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Survos\LibreTranslateBundle\Model\TranslateFile';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Survos\LibreTranslateBundle\Model\TranslateFile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Survos\LibreTranslateBundle\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Survos\LibreTranslateBundle\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Survos\LibreTranslateBundle\Model\ErrorSlowDown',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Survos\LibreTranslateBundle\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation translateFilePostAsync
     *
     * Translate file from a language to another
     *
     * @param  \SplFileObject $file File to translate (required)
     * @param  mixed $source Source language code (required)
     * @param  mixed $target Target language code (required)
     * @param  mixed $api_key API key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['translateFilePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function translateFilePostAsync($file, $source, $target, $api_key = null, string $contentType = self::contentTypes['translateFilePost'][0])
    {
        return $this->translateFilePostAsyncWithHttpInfo($file, $source, $target, $api_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation translateFilePostAsyncWithHttpInfo
     *
     * Translate file from a language to another
     *
     * @param  \SplFileObject $file File to translate (required)
     * @param  mixed $source Source language code (required)
     * @param  mixed $target Target language code (required)
     * @param  mixed $api_key API key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['translateFilePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function translateFilePostAsyncWithHttpInfo($file, $source, $target, $api_key = null, string $contentType = self::contentTypes['translateFilePost'][0])
    {
        $returnType = '\Survos\LibreTranslateBundle\Model\TranslateFile';
        $request = $this->translateFilePostRequest($file, $source, $target, $api_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'translateFilePost'
     *
     * @param  \SplFileObject $file File to translate (required)
     * @param  mixed $source Source language code (required)
     * @param  mixed $target Target language code (required)
     * @param  mixed $api_key API key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['translateFilePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function translateFilePostRequest($file, $source, $target, $api_key = null, string $contentType = self::contentTypes['translateFilePost'][0])
    {

        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling translateFilePost'
            );
        }

        // verify the required parameter 'source' is set
        if ($source === null || (is_array($source) && count($source) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source when calling translateFilePost'
            );
        }

        // verify the required parameter 'target' is set
        if ($target === null || (is_array($target) && count($target) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target when calling translateFilePost'
            );
        }



        $resourcePath = '/translate_file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($source !== null) {
            $formParams['source'] = ObjectSerializer::toFormValue($source);
        }
        // form params
        if ($target !== null) {
            $formParams['target'] = ObjectSerializer::toFormValue($target);
        }
        // form params
        if ($api_key !== null) {
            $formParams['api_key'] = ObjectSerializer::toFormValue($api_key);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation translatePost
     *
     * Translate text from a language to another
     *
     * @param  mixed $q Text(s) to translate (required)
     * @param  mixed $source Source language code (required)
     * @param  mixed $target Target language code (required)
     * @param  mixed $format Format of source text:  * &#x60;text&#x60; - Plain text  * &#x60;html&#x60; - HTML markup (optional)
     * @param  mixed $api_key API key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['translatePost'] to see the possible values for this operation
     *
     * @throws \Survos\LibreTranslateBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Survos\LibreTranslateBundle\Model\Translate|\Survos\LibreTranslateBundle\Model\ErrorResponse|\Survos\LibreTranslateBundle\Model\ErrorResponse|\Survos\LibreTranslateBundle\Model\ErrorSlowDown|\Survos\LibreTranslateBundle\Model\ErrorResponse
     */
    public function translatePost($q, $source, $target, $format = null, $api_key = null, string $contentType = self::contentTypes['translatePost'][0])
    {
        list($response) = $this->translatePostWithHttpInfo($q, $source, $target, $format, $api_key, $contentType);
        return $response;
    }

    /**
     * Operation translatePostWithHttpInfo
     *
     * Translate text from a language to another
     *
     * @param  mixed $q Text(s) to translate (required)
     * @param  mixed $source Source language code (required)
     * @param  mixed $target Target language code (required)
     * @param  mixed $format Format of source text:  * &#x60;text&#x60; - Plain text  * &#x60;html&#x60; - HTML markup (optional)
     * @param  mixed $api_key API key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['translatePost'] to see the possible values for this operation
     *
     * @throws \Survos\LibreTranslateBundle\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Survos\LibreTranslateBundle\Model\Translate|\Survos\LibreTranslateBundle\Model\ErrorResponse|\Survos\LibreTranslateBundle\Model\ErrorResponse|\Survos\LibreTranslateBundle\Model\ErrorSlowDown|\Survos\LibreTranslateBundle\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function translatePostWithHttpInfo($q, $source, $target, $format = null, $api_key = null, string $contentType = self::contentTypes['translatePost'][0])
    {
        $request = $this->translatePostRequest($q, $source, $target, $format, $api_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Survos\LibreTranslateBundle\Model\Translate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Survos\LibreTranslateBundle\Model\Translate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Survos\LibreTranslateBundle\Model\Translate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Survos\LibreTranslateBundle\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Survos\LibreTranslateBundle\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Survos\LibreTranslateBundle\Model\ErrorSlowDown' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Survos\LibreTranslateBundle\Model\ErrorSlowDown' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Survos\LibreTranslateBundle\Model\ErrorSlowDown', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Survos\LibreTranslateBundle\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Survos\LibreTranslateBundle\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Survos\LibreTranslateBundle\Model\Translate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Survos\LibreTranslateBundle\Model\Translate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Survos\LibreTranslateBundle\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Survos\LibreTranslateBundle\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Survos\LibreTranslateBundle\Model\ErrorSlowDown',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Survos\LibreTranslateBundle\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation translatePostAsync
     *
     * Translate text from a language to another
     *
     * @param  mixed $q Text(s) to translate (required)
     * @param  mixed $source Source language code (required)
     * @param  mixed $target Target language code (required)
     * @param  mixed $format Format of source text:  * &#x60;text&#x60; - Plain text  * &#x60;html&#x60; - HTML markup (optional)
     * @param  mixed $api_key API key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['translatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function translatePostAsync($q, $source, $target, $format = null, $api_key = null, string $contentType = self::contentTypes['translatePost'][0])
    {
        return $this->translatePostAsyncWithHttpInfo($q, $source, $target, $format, $api_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation translatePostAsyncWithHttpInfo
     *
     * Translate text from a language to another
     *
     * @param  mixed $q Text(s) to translate (required)
     * @param  mixed $source Source language code (required)
     * @param  mixed $target Target language code (required)
     * @param  mixed $format Format of source text:  * &#x60;text&#x60; - Plain text  * &#x60;html&#x60; - HTML markup (optional)
     * @param  mixed $api_key API key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['translatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function translatePostAsyncWithHttpInfo($q, $source, $target, $format = null, $api_key = null, string $contentType = self::contentTypes['translatePost'][0])
    {
        $returnType = '\Survos\LibreTranslateBundle\Model\Translate';
        $request = $this->translatePostRequest($q, $source, $target, $format, $api_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'translatePost'
     *
     * @param  mixed $q Text(s) to translate (required)
     * @param  mixed $source Source language code (required)
     * @param  mixed $target Target language code (required)
     * @param  mixed $format Format of source text:  * &#x60;text&#x60; - Plain text  * &#x60;html&#x60; - HTML markup (optional)
     * @param  mixed $api_key API key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['translatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function translatePostRequest($q, $source, $target, $format = null, $api_key = null, string $contentType = self::contentTypes['translatePost'][0])
    {

        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling translatePost'
            );
        }

        // verify the required parameter 'source' is set
        if ($source === null || (is_array($source) && count($source) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source when calling translatePost'
            );
        }

        // verify the required parameter 'target' is set
        if ($target === null || (is_array($target) && count($target) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target when calling translatePost'
            );
        }




        $resourcePath = '/translate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($q !== null) {
            $formParams['q'] = ObjectSerializer::toFormValue($q);
        }
        // form params
        if ($source !== null) {
            $formParams['source'] = ObjectSerializer::toFormValue($source);
        }
        // form params
        if ($target !== null) {
            $formParams['target'] = ObjectSerializer::toFormValue($target);
        }
        // form params
        if ($format !== null) {
            $formParams['format'] = ObjectSerializer::toFormValue($format);
        }
        // form params
        if ($api_key !== null) {
            $formParams['api_key'] = ObjectSerializer::toFormValue($api_key);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
